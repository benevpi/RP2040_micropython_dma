# Example using PIO to drive a set of WS2812 LEDs.
import array
from machine import Pin
import dma
import uasyncio as asyncio

# Configure the number of WS2812 LEDs.
NUM_LEDS = 256
PIN_NUM = 0
brightness = 0.2

@rp2.asm_pio(sideset_init=rp2.PIO.OUT_LOW, out_shiftdir=rp2.PIO.SHIFT_RIGHT, autopull=True, pull_thresh=24)
def ws2812():
    T1 = 2
    T2 = 5
    T3 = 3
    wrap_target()
    label("bitloop")
    out(x, 1)               .side(0)    [T3 - 1]
    jmp(not_x, "do_zero")   .side(1)    [T1 - 1]
    jmp("bitloop")          .side(1)    [T2 - 1]
    label("do_zero")
    nop()                   .side(0)    [T2 - 1]
    wrap()

class WS2812B: 
    def __init__(self, num_leds=8, pin_num=0, state_machine=0, brightness=1):
        # Create the StateMachine with the ws2812 program, outputting on pin
        self.sm = rp2.StateMachine(state_machine, ws2812, freq=8_000_000, sideset_base=Pin(pin_num))

        # Start the StateMachine, it will wait for data on its FIFO.
        self.sm.active(1)

        # Display a pattern on the LEDs via an array of LED RGB values.
        self.ar = array.array("I", [0 for _ in range(num_leds)])
        self.num_leds = num_leds
        self.brightness = brightness
        self.pio_dma = dma.PIO_DMA_Transfer(state_machine+4, state_machine, 32, num_leds)

  def show(self):
        #self.sm.put(self.ar)
        self.pio_dma.start_transfer(self.ar)
        
    def set(self, i, color):
        self.ar[i] = int((color[1]<<16)*self.brightness) + int((color[0]<<8)*self.brightness) + int(color[2]*self.brightness)

    def fill(self, color):
        for i in range(len(self.ar)):
            self.set(i, color)

    def wait(self):
        return self.pio_dma.busy()
    
    async def color_chase(self, color, wait):
        for i in range(self.num_leds):
            self.set(i, color)
            time.sleep(wait)
            self.show()
        await asyncio.sleep(0.2)
     
    def wheel(self, pos):
        # Input a value 0 to 255 to get a color value.
        # The colours are a transition r - g - b - back to r.
        if pos < 0 or pos > 255:
            return (0, 0, 0)
        if pos < 85:
            return (255 - pos * 3, pos * 3, 0)
        if pos < 170:
            pos -= 85
            return (0, 255 - pos * 3, pos * 3)
        pos -= 170
        return (pos * 3, 0, 255 - pos * 3)
      
    async def rainbow_cycle(self, wait):
        for j in range(255):
            for i in range(self.num_leds):
                rc_index = (i * 256 // self.num_leds) + j
                self.set(i, self.wheel(rc_index & 255))
            self.show()
            await asyncio.sleep(wait)

    BLACK = (0, 0, 0)
    RED = (255, 0, 0)
    YELLOW = (255, 150, 0)
    GREEN = (0, 255, 0)
    CYAN = (0, 255, 255)
    BLUE = (0, 0, 255)
    PURPLE = (180, 0, 255)
    WHITE = (255, 255, 255)
    COLORS = (BLACK, RED, YELLOW, GREEN, CYAN, BLUE, PURPLE, WHITE)

async def fill(num_leds, pin_num, wait=1):
    ws = WS2812B(num_leds=num_leds, pin_num=pin_num, state_machine=pin_num, brightness=1)
    while True:
        for color in ws.COLORS:            
            ws.fill(color)
            ws.show()
            await asyncio.sleep(wait)
            
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    asyncio.create_task(fill(8, 0, 2))
    asyncio.create_task(fill(8, 1, 1))
    loop.run_forever()

